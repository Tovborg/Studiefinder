import pandas as pd
import os
import asyncio
import httpx
from tqdm import tqdm
import re
import numpy as np
from dotenv import load_dotenv


# Load environment variables
# Load environment variables
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
load_dotenv(os.path.join(BASE_DIR, "../../.env"))

DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API")
DEEPSEEK_API_URL = "https://api.deepseek.com/chat/completions"

if not DEEPSEEK_API_KEY:
    raise ValueError("API key for DeepSeek is not set in the environment variables.")

# Load cleaned data
df = pd.read_csv(os.path.join(BASE_DIR, "../data/deep_augmented_data.csv"))
df_full = df.copy()  # Corrections will be inserted into this copy
rows = df.to_dict(orient="records")

# Find rows with errors
error_mask = df["final_augmented_text"].str.contains(r"\[Fejl: Exception\]")
error_rows = df[error_mask].reset_index()
print(f"Antal r√¶kker med fejl: {len(error_rows)}")

# Prompt
def build_prompt(text):
    return f"""
Du er en ekspert i AI og studievejledning. Her er en tekst, der beskriver en dansk bacheloruddannelse ‚Äì den indeholder b√•de introduktion, karriere, eksempler p√• elevinteresser, Google-s√∏gninger og jobtitler:

{text}

Din opgave er at:

1. Udv√¶lge og omskrive de mest relevante dele af teksten, s√• de bedst beskriver uddannelsens form√•l, typiske elevinteresser og karriereveje.

2. Skriv 3 korte og pr√¶cise s√¶tninger, som en elev kunne sige, hvis de dr√∏mmer om denne uddannelse. Brug varieret og naturligt sprog ‚Äì f.eks. "Jeg elsker at...", "Det lyder sp√¶ndende at...", "Jeg interesserer mig for..."

3. Tilf√∏j 2‚Äì3 unikke og realistiske jobtitler, man kan f√• med uddannelsen ‚Äì ikke bare generelle som ‚Äúkonsulent‚Äù eller ‚Äúformidler‚Äù, men s√• specifikt som muligt.

4. Tilf√∏j 2 Google-s√∏gninger, en nysgerrig elev kunne lave for at l√¶re mere om feltet. Brug realistiske s√∏gefraser og elev-ordvalg.

5. N√¶vn 2‚Äì3 konkrete fag eller projekter man typisk m√∏der p√• uddannelsen, og beskriv kort hvilke brancher eller arbejdsomr√•der uddannelsen typisk leder til.

Begr√¶ns output til **minimum 400 tokens og gerne t√¶t p√• 512**. Undg√• at gentage ord fra inputteksten direkte ‚Äì omskriv og fremh√¶v det vigtigste. Returner udelukkende selve tekstoutputtet uden overskrifter eller labels.
"""

# üîå Async API-kald
async def get_augmented_text(client, row, index):
    try:
        prompt = build_prompt(row["augmented_combined_text"])
        response = await client.post(
            DEEPSEEK_API_URL,
            headers={"Authorization": f"Bearer {DEEPSEEK_API_KEY}"},
            json={
                "model": "deepseek-chat",
                "messages": [
                    {"role": "system", "content": "Du er en hj√¶lpsom assistent"},
                    {"role": "user", "content": prompt}
                ],
                "temperature": 0.7,
                "max_tokens": 512,
            },
            timeout=60.0
        )
        if response.status_code != 200:
            print(f"‚ùå Fejl {response.status_code} for '{row['titel']}': {response.text}")
            return index, "[Fejl: Exception]"

        content = response.json()["choices"][0]["message"]["content"]
        return index, content
    except Exception as e:
        print(f"‚ùå Undtagelse for '{row['titel']}': {e}")
        return index, "[Fejl: Exception]"

# üöÄ K√∏r dem i batches
async def rerun_failed_rows(rows):
    results = [None] * len(rows)
    async with httpx.AsyncClient() as client:
        tasks = [get_augmented_text(client, row, i) for i, row in rows.iterrows()]
        for coro in tqdm(asyncio.as_completed(tasks), total=len(tasks), desc="üîÑ Retter fejl"):
            index, content = await coro
            results[index] = content
    return results

# üß† Main
def main():
    print("üîÅ Retter tidligere fejl...")
    fixed_texts = asyncio.run(rerun_failed_rows(error_rows))

    # Inds√¶t dem tilbage i originalen
    for i, row in error_rows.iterrows():
        original_index = row["index"]
        df_full.at[original_index, "final_augmented_text"] = fixed_texts[i]

    # Gem hele datas√¶ttet igen
    df_full.to_csv(os.path.join(BASE_DIR, "../data/deep_augmented_data_final.csv"), index=False)
    print("‚úÖ Gemte opdateret fil: deep_augmented_data_final.csv")

if __name__ == "__main__":
    main()